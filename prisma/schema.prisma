generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  name        String
  email       String     @unique
  password    String
  phone       String?
  role        UserRole   @default(customer)
  createdAt   DateTime   @default(now())

  addresses   Address[]
  cart        Cart?
  orders      Order[]
  reviews     Review[]
}

enum UserRole {
  customer @map("cliente")
  admin    @map("administrador")
}

model Address {
  id          Int      @id @default(autoincrement())
  userId      Int
  zipCode     String
  street      String
  number      String
  complement  String?
  city        String
  state       String
  isPrimary   Boolean  @default(false)

  user        User     @relation(fields: [userId], references: [id])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Product {
  id            Int           @id @default(autoincrement())
  name          String
  description   String
  price         Float
  stock         Int
  imageUrl      String
  isActive      Boolean       @default(true)
  categoryId    Int

  category      Category      @relation(fields: [categoryId], references: [id])
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime   @default(now())

  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int

  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id           Int           @id @default(autoincrement())
  userId       Int
  orderDate    DateTime      @default(now())
  status       OrderStatus   @default(pending)
  total        Float
  paymentId    String?

  user         User          @relation(fields: [userId], references: [id])
  items        OrderItem[]
  payment      Payment?
}

enum OrderStatus {
  pending   @map("pendente")
  shipped   @map("enviado")
  completed @map("concluido")
  canceled  @map("cancelado")
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  unitPrice  Float

  order      Order    @relation(fields: [orderId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id            Int       @id @default(autoincrement())
  orderId       Int       @unique
  method        String
  status        PaymentStatus
  amount        Float
  paidAt        DateTime?

  order         Order     @relation(fields: [orderId], references: [id])
}

enum PaymentStatus {
  paid     @map("pago")
  pending  @map("pendente")
  canceled @map("cancelado")
}

model Review {
  id           Int       @id @default(autoincrement())
  userId       Int
  productId    Int
  rating       Int
  comment      String?
  reviewedAt   DateTime   @default(now())

  user         User       @relation(fields: [userId], references: [id])
  product      Product    @relation(fields: [productId], references: [id])
}

model Coupon {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  type      CouponType
  value     Float
  isActive  Boolean   @default(true)
  expiresAt DateTime
}

enum CouponType {
  percentage @map("percentual")
  fixed      @map("fixo")
}
